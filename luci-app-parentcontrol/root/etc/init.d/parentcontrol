#!/bin/sh /etc/rc.common
# sirpdboy at 2021-2023 , <herboy2008@gmail.com>
#2025-05-07启动时判断硬件时间和系统时间，不一致则同步；by zxmlysxl
#Fixed by zxmlysxl 2025-05-10 www.zxmvps.com

DIR="$(cd "$(dirname "$0")" && pwd)"
MY_PATH=$DIR/iptables.sh
START=98

CONFIG=parentcontrol
LOG_FILE=/tmp/log/$CONFIG.log
LOCK_DIR=/tmp/lock
LOCK=/tmp/lock/${CONFIG}.lock
ipt=$(command -v iptables-legacy || command -v iptables)
ipt6=$(command -v ip6tables-legacy || command -v ip6tables)

TAG="PARENTCONTROL_TIME" 
TAGP="PARENTCONTROL_PROTOCOL" 
TAGW="PARENTCONTROL_WEBURL" 
FWI="/var/etc/$CONFIG.include"
elog() {
	local d="$(date "+%Y-%m-%d %H:%M:%S")"
	echo -e "$d: $*" >>$LOG_FILE
}

clean_log() {
	[ `cat $LOG_FILE  | wc -l ` -gt 500 ] && {
		elog "clear log ."
	}
}



set_rules() {
mmode=$1
   case $mmode in
        time)
            controlmode=$(uci -q get "$CONFIG.@basic[0].control_mode")
            if [ "x$controlmode" = "x1" ]; then
                # control_mode=1时同时应用于INPUT和FORWARD链
                for chain in INPUT FORWARD; do
                    for ip in "$ipt" "$ipt6"; do
                        $ip -N "$TAG" 2>/dev/null || $ip -F "$TAG" 2>/dev/null
                        $ip -C "$chain" -j "$TAG" 2>/dev/null || $ip -I "$chain" -j "$TAG" 2>/dev/null
                    done
                done
            else
                # 其他情况仅应用于FORWARD链
                chain=FORWARD
                for ip in "$ipt" "$ipt6"; do
                    $ip -N "$TAG" 2>/dev/null || $ip -F "$TAG" 2>/dev/null
                    $ip -C "$chain" -j "$TAG" 2>/dev/null || $ip -I "$chain" -j "$TAG" 2>/dev/null
                done
            fi
            ;;
        protocol)
            chain=FORWARD
            for ip in "$ipt" "$ipt6"; do
                $ip -N "$TAGP" 2>/dev/null || $ip -F "$TAGP" 2>/dev/null
                $ip -C "$chain" -j "$TAGP" 2>/dev/null || $ip -I "$chain" -j "$TAGP" 2>/dev/null
            done
            ;;
        weburl)
            chain=OUTPUT
            algos=$(uci -q get "$CONFIG.@basic[0].algos")
            for ip in "$ipt" "$ipt6"; do
                $ip -N "$TAGW" 2>/dev/null || $ip -F "$TAGW" 2>/dev/null
                $ip -C "$chain" -j "$TAGW" 2>/dev/null || $ip -I "$chain" -j "$TAGW" 2>/dev/null
            done
            ;;
    esac  
idlist=`uci show $CONFIG | grep "enable='1'" | grep "$mmode" | grep -oE '\[.*?\]' | grep -o '[0-9]'`
elog "set_rules:$mmode" 
for i in $idlist ; do
    mac=$(uci -q get $CONFIG.@$mmode[$i].mac ) && MAC="-m mac --mac-source $mac" || MAC=""
    timestart=$(uci get $CONFIG.@$mmode[$i].timestart 2>/dev/null) || timestart="00:00"
    timeend=$(uci get $CONFIG.@$mmode[$i].timeend 2>/dev/null) || timeend="00:00"
    wweek=$(uci get $CONFIG.@$mmode[$i].week | sed 's/ /,/g' 2>/dev/null)
    for ww in `echo $wweek | sed 's/,/ /g' `; do 
        [ "$ww" == "1" ] && local Z1="Mon,"
        [ "$ww" == "2" ] && local Z2="Tue,"
        [ "$ww" == "3" ] && local Z3="Wed,"
        [ "$ww" == "4" ] && local Z4="Thu,"
        [ "$ww" == "5" ] && local Z5="Fri,"
        [ "$ww" == "6" ] && local Z6="Sat,"
        [ "$ww" == "7" ] && local Z7="Sun"
    done
    [ -z "$timestart" -o -z "$timeend" -o "$timestart" = "$timeend" ] && TIME="" || TIME="--timestart ${timestart} --timestop ${timeend}"
    [ -z "$wweek" -o "$wweek" = "*" ] && WEEK="" || WEEK="--weekdays $Z1$Z2$Z3$Z4$Z5$Z6$Z7"
    [ -n "$TIME" -o -n "$WEEK" ] && WT="-m time --kerneltz ${TIME} ${WEEK}" || WT=""
    case $mmode in
        time)
            # 获取路由器IP（优先从接口获取）
		    ROUTER_IP=$(ip -4 addr show br-lan | grep -oP '(?<=inet\s)\d+(\.\d+){3}' || echo "192.168.32.1")
		
		    for pt in "$ipt" "$ipt6"; do
		        # 1. 时间控制规则（精确时间匹配）
		        $pt -I FORWARD 1 -m mac --mac-source ${mac} ${WT} -j REJECT
		        
		        # 2. 强制流量经路由器（关键防御）
		        $pt -I FORWARD 2 -m mac --mac-source ${mac} ! -d ${ROUTER_IP} -j DROP
		        
		        # 3. 放行基础服务（严格限制）
		        $pt -I FORWARD 3 -m mac --mac-source ${mac} -p udp --dport 53 -d ${ROUTER_IP} -j ACCEPT
		        $pt -I FORWARD 4 -m mac --mac-source ${mac} -p tcp --dport 53 -d ${ROUTER_IP} -j ACCEPT
		        
		        elog "核心规则: MAC=${mac} 路由器IP=${ROUTER_IP}"
		    done
		
			    # 4. 增强型二层防御
			    ebtables -N PARENTCTRL 2>/dev/null
			    ebtables -F PARENTCTRL
			    ebtables -A PARENTCTRL -s ${mac} -j DROP
			    ebtables -I FORWARD -j PARENTCTRL
            ;;
        protocol)
            proto=$(uci -q get $CONFIG.@$mmode[$i].proto ) || proto="tcp"
            ports=$(uci -q get $CONFIG.@$mmode[$i].ports ) && SPO="--sport ${ports}" || SPO=""
            portd=$(uci -q get $CONFIG.@$mmode[$i].portd ) && DPO="--dport ${portd}" || DPO=""
            mMPT=`echo "$ports"|grep ","` && mSPO="-m multiport" || mSPO=""
            mMPT=`echo "$portd"|grep ","` && mDPO="-m multiport" || mDPO=""
            [ -z "$ports" -a -z "$portd" ] && PTO="" || PTO="-p ${proto} ${mSPO} ${SPO} ${mDPO} ${DPO}"
            for pt in "$ipt" "$ipt6" ; do
                $pt -I $TAGP ${MAC} ${WT} ${PTO} -j REJECT 2>/dev/null 
                elog "$mmode: $pt -- ${MAC} -- ${WT} -- ${PTO}"
            done
            ;;
        weburl)
            word=$(uci -q get $CONFIG.@$mmode[$i].word ) && STR="-m string --algo ${algos} --string ${word}" || STR=""
            word2=$(uci -q get $CONFIG.@$mmode[$i].word ) && STR2="-m string --algo ${algos} --hex-string ${word2}" || STR2=""
            for pt in "$ipt" "$ipt6" ; do
                $pt -I $TAGW -p UDP --dport 53 ${MAC} ${WT} ${STR} -j DROP 2>/dev/null
                $pt -I $TAGW -p UDP --dport 53 ${MAC} ${WT} ${STR2} -j DROP 2>/dev/null
                $pt -I $TAGW -p TCP --dport 853 ${MAC} ${WT} ${STR} -j DROP 2>/dev/null
                $pt -I $TAGW -p TCP --dport 853 ${MAC} ${WT} ${STR2} -j DROP 2>/dev/null
                elog "$mmode: $pt -- ${MAC} -- ${WT} -- ${STR}"
            done
            ;; 
        *) ;;
    esac
    unset STR MAC WT PTO Z1 Z2 Z3 Z4 Z5 Z6 Z7
done
}

flush_include() {
	echo '#!/bin/sh' >$FWI
}

del_rule() {
  ROUTER_IP=$(ip -4 addr show br-lan | grep -oP '(?<=inet\s)\d+(\.\d+){3}' || echo "192.168.219.10")
    
    for ip in "$ipt" "$ipt6"; do
        # 清理所有可能残留规则
        $ip -D FORWARD -m mac --mac-source 00:50:56:e6:f5:62 -j REJECT 2>/dev/null
        $ip -D FORWARD -m mac --mac-source 00:50:56:e6:f5:62 ! -d ${ROUTER_IP} -j DROP 2>/dev/null
        $ip -D FORWARD -m mac --mac-source 00:50:56:e6:f5:62 -p udp --dport 53 -j ACCEPT 2>/dev/null
        $ip -D FORWARD -m mac --mac-source 00:50:56:e6:f5:62 -p tcp --dport 53 -j ACCEPT 2>/dev/null
    done
    
    ebtables -D FORWARD -j PARENTCTRL 2>/dev/null
    ebtables -F PARENTCTRL 2>/dev/null
    ebtables -X PARENTCTRL 2>/dev/null
}

# 硬件时间同步函数
sync_hardware_clock() {
    # 获取系统时间（秒数）
    SYS_TIME=$(date +%s)
    
    # 获取硬件时间（秒数），兼容不同hwclock版本
    HW_TIME=$(hwclock --show --date="$(date '+%Y-%m-%d %H:%M:%S')" +%s 2>/dev/null || \
              hwclock -r --date="$(date '+%Y-%m-%d %H:%M:%S')" +%s 2>/dev/null)
    
    # 计算绝对值时间差（秒）
    TIME_DIFF=$(( SYS_TIME - HW_TIME ))
    ABS_DIFF=${TIME_DIFF#-}  # 取绝对值

    # 如果差异超过30秒，则同步
    if [ "$ABS_DIFF" -gt 30 ]; then
        hwclock --systohc --localtime
        elog "Hardware clock synchronized (Drift: ${TIME_DIFF} seconds)"
    else
        elog "Hardware clock in sync (Drift: ${TIME_DIFF} seconds, no action)"
    fi
}

start(){
     [ -f $LOCK ] && exit 1
     del_rule
     
     # 调用时间同步函数
    sync_hardware_clock
    
     enabled=`uci -q get $CONFIG.@basic[0].enabled`
     [ "x$enabled" == "x1" ] || exit 1
     allsum=`grep -c 'enable .1.' /etc/config/$CONFIG`
     [ "$allsum" -gt 0 ] && {
        touch $LOCK
        set_rules time
	set_rules protocol
	set_rules weburl
    }
     clean_log 
     rm -f $LOCK  2>/dev/null
}

stop(){
     del_rule
     rm -f $LOCK  2>/dev/null
}

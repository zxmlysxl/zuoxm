#!/bin/sh /etc/rc.common
# 家长控制终极防御版
# 版本：v2.7 - 完整防御+错误处理

USE_PROCD=1
START=98
STOP=98

CONFIG=parentcontrol
LOG_FILE="/tmp/log/$CONFIG.log"
LOCK="/tmp/lock/${CONFIG}.lock"
ipt=$(command -v iptables-legacy || command -v iptables)
ipt6=$(command -v ip6tables-legacy || command -v ip6tables)

# 防御链命名
TAG="PARENTCONTROL_TIME"
TAGP="PARENTCONTROL_PROTOCOL"
TAGW="PARENTCONTROL_WEBURL"
ROUTER_IP=$(uci get network.lan.ipaddr 2>/dev/null || echo "192.168.32.1")

elog() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $*" >>$LOG_FILE
}

init_ebtables() {
    if ! command -v ebtables >/dev/null; then
        elog "警告：ebtables未安装，二层防御将失效"
        return 1
    fi
    
    # 创建专用链并防止重复添加
    if ! ebtables -L PARENTCTRL >/dev/null 2>&1; then
        ebtables -N PARENTCTRL
        ebtables -I FORWARD -j PARENTCTRL
    fi
    ebtables -F PARENTCTRL
    return 0
}

set_rules() {
    mmode=$1
    idlist=$(uci show $CONFIG | grep "enable='1'" | grep "$mmode" | grep -oE '\[.*?\]' | grep -o '[0-9]')
    [ -z "$idlist" ] && return

    case $mmode in
        time)
            # 初始化链
            controlmode=$(uci -q get "$CONFIG.@basic[0].control_mode")
            [ "x$controlmode" = "x1" ] && chains="INPUT FORWARD" || chains="FORWARD"
            
            for chain in $chains; do
                for ip in "$ipt" "$ipt6"; do
                    $ip -N "$TAG" 2>/dev/null
                    $ip -F "$TAG" 2>/dev/null
                    $ip -I $chain -j "$TAG"
                done
            done

            # 时间规则
            for i in $idlist; do
                mac=$(uci -q get $CONFIG.@$mmode[$i].mac)
                [ -z "$mac" ] && continue
                
                # 时间条件
                timestart=$(uci get $CONFIG.@$mmode[$i].timestart 2>/dev/null) || timestart="00:00"
                timeend=$(uci get $CONFIG.@$mmode[$i].timeend 2>/dev/null) || timeend="00:00"
                wweek=$(uci get $CONFIG.@$mmode[$i].week | sed 's/ /,/g' 2>/dev/null)
                
                # 防御规则
                for ip in "$ipt" "$ipt6"; do
                    # 基础规则
                    $ip -I $TAG -m mac --mac-source $mac \
                        -m time --timestart $timestart --timestop $timeend \
                        --weekdays $(echo $wweek | sed 's/1/Mon/g;s/2/Tue/g;s/3/Wed/g;s/4/Thu/g;s/5/Fri/g;s/6/Sat/g;s/7/Sun/g') \
                        -j REJECT
                    
                    # 增强防御
                    $ip -t nat -I PREROUTING -m mac --mac-source $mac -j DNAT --to-destination $ROUTER_IP
                    $ip -I FORWARD -m mac --mac-source $mac ! -d $ROUTER_IP -j DROP
                    $ip -I FORWARD -m mac --mac-source $mac -m state --state NEW -j DROP
                done

                # 二层防御
                if init_ebtables; then
                    ebtables -A PARENTCTRL -s $mac -j DROP && \
                    elog "二层防御生效: $mac"
                fi
            done
            ;;

        protocol)
            # 初始化链
            for ip in "$ipt" "$ipt6"; do
                $ip -N "$TAGP" 2>/dev/null
                $ip -F "$TAGP" 2>/dev/null
                $ip -I FORWARD -j "$TAGP"
            done

            # 协议规则
            for i in $idlist; do
                mac=$(uci -q get $CONFIG.@$mmode[$i].mac)
                [ -z "$mac" ] && continue
                
                proto=$(uci -q get $CONFIG.@$mmode[$i].proto) || proto="tcp"
                ports=$(uci -q get $CONFIG.@$mmode[$i].ports)
                portd=$(uci -q get $CONFIG.@$mmode[$i].portd)
                
                for ip in "$ipt" "$ipt6"; do
                    [ -n "$ports" ] && $ip -I $TAGP -m mac --mac-source $mac -p $proto -m multiport --sports $ports -j REJECT
                    [ -n "$portd" ] && $ip -I $TAGP -m mac --mac-source $mac -p $proto -m multiport --dports $portd -j REJECT
                done
            done
            ;;

        weburl)
            # 初始化链
            algos=$(uci -q get "$CONFIG.@basic[0].algos")
            for ip in "$ipt" "$ipt6"; do
                $ip -N "$TAGW" 2>/dev/null
                $ip -F "$TAGW" 2>/dev/null
                $ip -I OUTPUT -j "$TAGW"
            done

            # URL规则
            for i in $idlist; do
                mac=$(uci -q get $CONFIG.@$mmode[$i].mac)
                [ -z "$mac" ] && continue
                
                word=$(uci -q get $CONFIG.@$mmode[$i].word)
                [ -n "$word" ] && for ip in "$ipt" "$ipt6"; do
                    $ip -I $TAGW -m mac --mac-source $mac -p udp --dport 53 -m string --algo $algos --string "$word" -j DROP
                    $ip -I $TAGW -m mac --mac-source $mac -p tcp --dport 853 -m string --algo $algos --string "$word" -j DROP
                done
            done
            ;;
    esac
}

del_rule() {
    # 清理iptables
    for ip in "$ipt" "$ipt6"; do
        for chain in "PREROUTING" "FORWARD" "INPUT" "OUTPUT"; do
            for target in "$TAG" "$TAGP" "$TAGW"; do
                while $ip -D $chain -j $target 2>/dev/null; do :; done
            done
            $ip -F $chain 2>/dev/null
        done
        
        for chain in "$TAG" "$TAGP" "$TAGW"; do
            $ip -F $chain 2>/dev/null
            $ip -X $chain 2>/dev/null
        done
        
        $ip -t nat -F PREROUTING 2>/dev/null
    done
    
    # 清理ebtables
    if command -v ebtables >/dev/null; then
        ebtables -F PARENTCTRL 2>/dev/null
        ebtables -X PARENTCTRL 2>/dev/null
    fi
}

start() {
    [ -f $LOCK ] && exit 1
    touch $LOCK
    
    del_rule
    init_ebtables
    
    enabled=$(uci -q get $CONFIG.@basic[0].enabled)
    [ "x$enabled" = "x1" ] && {
        set_rules time
        set_rules protocol
        set_rules weburl
        elog "服务启动成功 - 防御层级：L2+L3"
    }
    
    rm -f $LOCK
}

stop() {
    del_rule
    rm -f $LOCK
    elog "服务已停止"
}

restart() {
    stop
    sleep 1
    start
}
